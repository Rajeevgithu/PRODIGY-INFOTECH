let boxes = document.querySelectorAll(".box");
let resetBtn = document.querySelector("#reset-btn");
let newGameBtn = document.querySelector("#new-btn");
let msgContainer = document.querySelector(".msg-container");
let msg = document.querySelector("#msg");
let aiToggle = document.querySelector("#aiToggle");

let difficulty = 'easy'; // Default difficulty
let turnO = true; // Player O starts
let count = 0; // To track the number of moves
let aiEnabled = false; // AI toggle

const winPatterns = [
  [0, 1, 2],
  [0, 3, 6],
  [0, 4, 8],
  [1, 4, 7],
  [2, 5, 8],
  [2, 4, 6],
  [3, 4, 5],
  [6, 7, 8],
];

// Function to reset the game
const resetGame = () => {
  turnO = true;
  count = 0;
  aiEnabled = aiToggle.checked;
  enableBoxes();
  msgContainer.classList.add("hide");
};

// Add event listeners to each box for player moves
boxes.forEach((box, index) => {
  box.addEventListener("click", () => {
    if (turnO) {
      box.innerText = "O";
      turnO = false;
    } else {
      box.innerText = "X";
      turnO = true;
    }
    box.disabled = true;
    count++;

    let isWinner = checkWinner();

    if (count === 9 && !isWinner) {
      gameDraw();
    } else if (aiEnabled && !turnO && !isWinner) {
      setTimeout(() => aiMove(), 500); // AI moves after 0.5 seconds
    }
  });
});

// AI move based on selected difficulty
const aiMove = () => {
  let bestMove;

  if (difficulty === 'easy') {
    bestMove = randomMove();
  } else if (difficulty === 'medium') {
    bestMove = blockOrRandomMove();
  } else if (difficulty === 'hard') {
    bestMove = minimaxMove();
  }

  boxes[bestMove].innerText = "X";
  boxes[bestMove].disabled = true;
  count++;

  let isWinner = checkWinner();
  if (count === 9 && !isWinner) {
    gameDraw();
  }
  turnO = true;
};

// Function for random move (Easy difficulty)
const randomMove = () => {
  let availableMoves = [];
  boxes.forEach((box, index) => {
    if (box.innerText === "") {
      availableMoves.push(index);
    }
  });
  return availableMoves[Math.floor(Math.random() * availableMoves.length)];
};

// Function to block player or make a random move (Medium difficulty)
const blockOrRandomMove = () => {
  // Block if the player is about to win
  for (let pattern of winPatterns) {
    let pos1Val = boxes[pattern[0]].innerText;
    let pos2Val = boxes[pattern[1]].innerText;
    let pos3Val = boxes[pattern[2]].innerText;

    if ((pos1Val === "O" && pos2Val === "O" && pos3Val === "") ||
        (pos1Val === "O" && pos2Val === "" && pos3Val === "O") ||
        (pos1Val === "" && pos2Val === "O" && pos3Val === "O")) {
      if (pos3Val === "") return pattern[2];
      if (pos2Val === "") return pattern[1];
      if (pos1Val === "") return pattern[0];
    }
  }
  return randomMove(); // If no block needed, make a random move
};

// Function for the AI's best move using the minimax algorithm (Hard difficulty)
const minimaxMove = () => {
  let bestScore = -Infinity;
  let bestMove;

  boxes.forEach((box, index) => {
    if (box.innerText === "") {
      box.innerText = "X";
      let score = minimax(false);
      box.innerText = "";
      if (score > bestScore) {
        bestScore = score;
        bestMove = index;
      }
    }
  });

  return bestMove;
};

// Minimax algorithm implementation
const minimax = (isMaximizing) => {
  let winner = checkWinner(true);
  if (winner !== null) {
    if (winner === "X") return 1;
    if (winner === "O") return -1;
    return 0;
  }

  if (isMaximizing) {
    let bestScore = -Infinity;
    boxes.forEach((box) => {
      if (box.innerText === "") {
        box.innerText = "X";
        let score = minimax(false);
        box.innerText = "";
        bestScore = Math.max(score, bestScore);
      }
    });
    return bestScore;
  } else {
    let bestScore = Infinity;
    boxes.forEach((box) => {
      if (box.innerText === "") {
        box.innerText = "O";
        let score = minimax(true);
        box.innerText = "";
        bestScore = Math.min(score, bestScore);
      }
    });
    return bestScore;
  }
};

// Function to handle game draw
const gameDraw = () => {
  msg.innerText = `Game was a Draw.`;
  msgContainer.classList.remove("hide");
  disableBoxes();
};

// Function to disable all boxes (end game)
const disableBoxes = () => {
  boxes.forEach((box) => {
    box.disabled = true;
  });
};

// Function to enable all boxes (start new game)
const enableBoxes = () => {
  boxes.forEach((box) => {
    box.disabled = false;
    box.innerText = "";
  });
};

// Function to display the winner
const showWinner = (winner) => {
  msg.innerText = `Congratulations, Winner is ${winner}`;
  msgContainer.classList.remove("hide");
  disableBoxes();
};

// Function to check if there's a winner
const checkWinner = (returnWinner = false) => {
  for (let pattern of winPatterns) {
    let pos1Val = boxes[pattern[0]].innerText;
    let pos2Val = boxes[pattern[1]].innerText;
    let pos3Val = boxes[pattern[2]].innerText;

    if (pos1Val != "" && pos2Val != "" && pos3Val != "") {
      if (pos1Val === pos2Val && pos2Val === pos3Val) {
        if (returnWinner) return pos1Val;
        showWinner(pos1Val);
        return true;
      }
    }
  }
  if (returnWinner) return count === 9 ? "draw" : null;
  return false;
};

// Event listeners for buttons and difficulty selection
newGameBtn.addEventListener("click", resetGame);
resetBtn.addEventListener("click", resetGame);

document.getElementById("easyButton").addEventListener("click", () => {
  difficulty = 'easy';
});

document.getElementById("mediumButton").addEventListener("click", () => {
  difficulty = 'medium';
});

document.getElementById("hardButton").addEventListener("click", () => {
  difficulty = 'hard';
});
